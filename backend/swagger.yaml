openapi: 3.0.0
info:
  title: OShop REST API
  description: OShop's API Documentation
  version: 1.0.0

servers:
  - url: http://localhost:5000/api/v1
    description: Development server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: express:sess

  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        email:
          type: string
        avatar:
          type: string
        verified:
          type: boolean
        role:
          type: string
        createdAt:
          type: string

    Category:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        visible:
          type: string
      example:
        name: Kitchen Ware
        slug: kitchen-ware
        visible: ACTIVE
paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: Register a new user in the system. The session ID is returned in a cookie named 'express:sess'. Include it in subsequent requests that require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
              example:
                firstName: Test
                lastName: Test
                email: test@test.com
                password: password
      responses:
        201:
          description: Account created successfully
        400:
          description: Bad request

  /auth/signin:
    post:
      summary: Sign in a user
      description: Sign in an existing user in the system. The session ID is returned in a cookie named 'express:sess'. Include it in subsequent requests that require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: test@test.com
                password: password
      responses:
        200:
          description: User signed in successfully
        400:
          description: Invalid credentials

  /auth/signout:
    get:
      summary: Sign out a user
      description: Sign out a logged in user
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                type: object
                items:
                  status:
                    type: string
                  message:
                    type: string

  /users:
    get:
      summary: Get users
      description: Retrieves a list user JSON objects in an array (*admin only*)
      responses:
        200:
          description: A list of user JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/current:
    get:
      summary: Get Current user
      description: Retrieve currently signed in user
      security:
        - cookieAuth: [ ]
      responses:
        200:
          description: Currently signed in user
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'

  /categories:
    post:
      summary: Add Category
      description: Add a new Category
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              example:
                name: Laptops
      responses:
        201:
          description: Category created successfully
        400:
          description: Bad request
        401:
          description: Unauthorized request

    get:
      summary: Get Categories
      description: Retrieves a list of available categories in an array
      responses:
        200:
          description: A list of category JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /categories/all:
    get:
      summary: Get all Categories
      description: Retrieves a list of all the available categories in the system
      responses:
        200:
          description: A list of all category JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /categories/{slug}:
    get:
      summary: Get a Category
      description: Retrieves a category based on the slug
      parameters:
        - in: path
          name: slug
          required: true
          description: Category slug
          schema:
            type: string
      responses:
        200:
          description: A category in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Not found

    patch:
      summary: Updates a Category
      description: Update a specific category based on the slug provided
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: slug
          required: true
          description: The Category slug
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                visible:
                  type: string
              example:
                name: Laptops
                visible: ACTIVE

      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          description: Unauthorized request
        404:
          description: Not found

    delete:
      summary: Deletes a Category
      description: Delete a specific category based on the category slug
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: slug
          required: true
          description: The category slug
          schema:
            type: string

      responses:
        204:
          description: Category deleted successfully
        401:
          description: Unauthorized request
        404:
          description: Not found
openapi: 3.0.0
info:
  title: OShop REST API
  description: Savanah Collections' API Documentation
  version: 1.0.0
servers:
  - url: https://www.api.codewithevans.com/
    description: Production server
  - url: http://localhost:5000/api/v1
    description: Development server

components:
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        email:
          type: string
        avatar:
          type: string
        verified:
          type: boolean
        role:
          type: string
        createdAt:
          type: string
    Section:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
    Category:
      type: object
      properties:
        name:
          type: string
        section:
          $ref: '#/components/schemas/Section'
        slug:
          type: string
        productCount:
          type: number
    Product:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        stock:
          type: number
        price:
          type: number
        category:
          $ref: '#/components/schemas/Category'
        brand:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        createdBy:
          type: string
    Cart:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        units:
          type: number
        customer:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            id:
              type: string
        createdAt:
          type: string
    Order:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        createdAt:
          type: string
    Address:
      type: object
      properties:
        id:
          type: string
    Offer:
      type: object
      properties:
        id:
          type: string
        product:
          $ref: '#/components/schemas/Product'
        expiresAt:
          type: string

paths:
  /auth/signup:
    post:
      tags:
        - authentication
      summary: Register a new user
      description: Register a new user in the system. The session ID is returned in a cookie named 'express:sess'. Include it in subsequent requests that require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              example:
                firstName: Test
                lastName: Test
                email: test@test.com
                password: password
      responses:
        201:
          description: Account created successfully
        400:
          description: Bad request

  /auth/signin:
    post:
      tags:
        - authentication
      summary: Sign in a user
      description: Sign in an existing user in the system. The session ID is returned in a cookie named 'express:sess'. Include it in subsequent requests that require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              example:
                email: test@test.com
                password: password
      responses:
        200:
          description: User signed in successfully
        400:
          description: Invalid credentials

  /auth/signout:
    get:
      tags:
        - authentication
      summary: Sign out a user
      description: Sign out a logged in user
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                type: object
                items:
                  status:
                    type: string
                  message:
                    type: string

  /users:
    get:
      tags:
        - users
      summary: Get users
      description: Retrieves a list user JSON objects in an array (*admin only*)
      security:
        - tokenAuth: [ ]
      responses:
        200:
          description: A list of user JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user
      description: Retrieves a user based on the id provided
      parameters:
        - in: path
          name: id
          required: true
          description: userId
          schema:
            type: string
      responses:
        200:
          description: A user in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    patch:
      tags:
        - users
      summary: Update user
      description: Update the currently logged in user details
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The User Id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                password:
                  type: string
              example:
                firstName: Lazy
                lastName: Programmer
                password: password
      responses:
        200:
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized request
        404:
          description: Not found

    delete:
      tags:
        - users
      summary: Deletes a user
      description: Deletes a user based on the id provided (*admin request*)
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The user id
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        401:
          description: Unauthorized request
        404:
          description: Not found

  /users/current:
    get:
      tags:
        - users
      summary: Get Current user
      description: Retrieve currently signed in user
      security:
        - tokenAuth: [ ]
      responses:
        200:
          description: Currently signed in user
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'

  /sections:
    post:
      tags:
        - sections
      summary: Add Section
      description: Add a new Section
      security:
        - tokenAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              example:
                name: Art
      responses:
        201:
          description: Section created successfully
        400:
          description: Bad request
        401:
          description: Unauthorized request

    get:
      tags:
        - sections
      summary: Get Sections
      description: Retrieves a list of available sections
      responses:
        200:
          description: A list of available sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'

  /sections/{id}:
    get:
      tags:
        - sections
      summary: Get a Section
      description: Retrieves a section based on the id
      parameters:
        - in: path
          name: id
          required: true
          description: Section id
          schema:
            type: string
      responses:
        200:
          description: A category in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        404:
          description: Not found

    patch:
      tags:
        - sections
      summary: Updates a Section
      description: Update a specific section based on the id provided
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The Section id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Section updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Section"
        401:
          description: Unauthorized request
        404:
          description: Not found

    delete:
      tags:
        - sections
      summary: Deletes a Section
      description: Delete a specific section based on the section id
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The section id
          schema:
            type: string
      responses:
        204:
          description: Section deleted successfully
        400:
          description: Invalid id
        401:
          description: Unauthorized request
        404:
          description: Not found

  /categories:
    post:
      tags:
        - categories
      summary: Add Category
      description: Add a new Category
      security:
        - tokenAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                sectionId:
                  type: string
      responses:
        201:
          description: Category created successfully
        400:
          description: Bad request
        401:
          description: Unauthorized request

    get:
      tags:
        - categories
      summary: Get Categories
      description: Retrieves a list of available categories in an array
      responses:
        200:
          description: A list of category JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      tags:
        - categories
      summary: Get a Category
      description: Retrieves a category based on the id
      parameters:
        - in: path
          name: id
          required: true
          description: Category id
          schema:
            type: string
      responses:
        200:
          description: A category in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
        404:
          description: Not found

    patch:
      tags:
        - categories
      summary: Updates a Category
      description: Update a specific category based on the id provided
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The Category id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              example:
                name: Laptops
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Bad request
        401:
          description: Unauthorized request
        404:
          description: Not found

    delete:
      tags:
        - categories
      summary: Deletes a Category
      description: Delete a specific category based on the category id
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The category id
          schema:
            type: string
      responses:
        204:
          description: Category deleted successfully
        400:
          description Bad request
        401:
          description: Unauthorized request
        404:
          description: Not found

  /categories/section/{sectionId}:
    get:
      tags:
        - categories
      summary: Get Categories by sectionId
      description: Retrieves categories based on the sectionId provided
      parameters:
        - in: path
          name: sectionId
          required: true
          description: Section id
          schema:
            type: string
      responses:
        200:
          description: A list of categories based on the section id provided
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request
        404:
          description: Section not found

  /products:
    post:
      tags:
        - products
      summary: Add a product
      description: Add a new product
      security:
        - tokenAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                stock:
                  type: number
                section:
                  type: string
                category:
                  type: string
                description:
                  type: string
                images:
                  type: array
                  items:
                    format: binary
                    type: file
              required:
                - name
                - price
                - stock
                - description
                - section
                - category
                - images
      responses:
        201:
          description: Product created successfully
        400:
          description: Bad request
        401:
          description: Unauthorized request

    get:
      tags:
        - products
      summary: Get Products
      description: Retrieves a list of available products in JSON format
      responses:
        200:
          description: A list of product JSON objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - products
      summary: Get a product
      description: Retrieves a product based in the id provided
      parameters:
        - in: path
          name: id
          required: true
          description: Product id
          schema:
            type: string
      responses:
        200:
          description: A product in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad request
        404:
          description: Not found

    patch:
      tags:
        - products
      summary: Updates a Product
      description: Update a specific product based on the product id provided
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The Product id
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: '#/components/schemas/ProductBody'
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        4004:
          description: Bad request
        401:
          description: Unauthorized request
        404:
          description: Not found

    delete:
      tags:
        - products
      summary: Deletes a Product
      description: Delete a specific product based on the product id provided
      security:
        - tokenAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The Product id
          schema:
            type: string
      responses:
        200:
          description: Product deleted successfully
        4004:
          description: Bad request
        401:
          description: Unauthorized request
        404:
          description: Not found
        500:
          description: Bad request

  /cart:
    post:
      tags:
        - cart
      summary: Add cart item
      description: Add a product to cart
      security:
        - tokenAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  type: string
                units:
                  type: number
              example:
                product: random_product_id
                units: 1
      responses:
        201:
          description: Product added to cart
        400:
          description: Bad request
        401:
          description: Unauthorized request

    get:
      tags:
        - cart
      summary: Get cart items
      description: Retrieves currently signed in user cart items
      security:
        - tokenAuth: [ ]
      responses:
        200:
          description: A list of signed in user cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'

  /cart/{id}:
    patch:
      tags:
        - cart
      summary: Update cart item
      descritption: Update a specific cart item for the currently signed in user
      security:
        - tokenAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The cart item id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                units:
                  type: number
      responses:
        200:
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        401:
          description: Unauthorized request
        404:
          description: Not found
    delete:
      tags:
        - cart
      summary: Delete a cart item
      description: Delete a specific cart item belonging to the currently signed in user
      security:
        - tokenAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The cart item id
          schema:
            type: string
      responses:
        204:
          description: Cart item deleted successfully
        400:
          description: Invalid id
        401:
          description: Unauthorized request
        404:
          description: Not found

  /orders:
    get:
      tags:
        - orders
      summary: Fetch orders
      description: Fetch a list of orders by admin
      security:
        - tokenAuth: []
      responses:
        200:
          description: A list of orders made
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
#offer, addresses